#!/usr/bin/perl
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib/perl";
use Getopt::Lucid qw( :all );
use Config::Simple;

my @specs1 =
  ( Param("--config")->default("$FindBin::Bin/../../etc/graph/grapha.cnf"), );

my @specs2 =
  ( Param("--config")->default("$FindBin::Bin/../../etc/graph/graphs.cnf"), );

# Parse and validate given parameters
my $opt1 = Getopt::Lucid->getopt( \@specs1 );
my $opt2 = Getopt::Lucid->getopt( \@specs2 );

$opt1->validate( { 'requires' => [] } );
$opt2->validate( { 'requires' => [] } );

my $cfg1 = new Config::Simple( $opt1->get_config );
my $cfg2 = new Config::Simple( $opt2->get_config );

my $imbiss1 = $cfg1->param("sources.imbiss");
my $imbiss2 = $cfg2->param("sources.imbiss");

my $graph1 = $cfg1->param("sources.graph");
my $graph2 = $cfg2->param("sources.graph");

my $first;

open( INPUT, "<$imbiss1" ) or die "Could not open '$imbiss1' $!\n";
open( GRAPH, '>', "$graph1" );
$first = 1;
while ( my $line = <INPUT> ) {
	chomp $line;
	if ( $first == 1 ) {
		$first = 0;
		next;
	}
	my @fields = split ";", $line;

	my $seq1       = $fields[2];
	my $seq2       = $fields[3];
	my $similarity = $fields[10];    # get sequence identity
	print GRAPH "$seq1\t$seq2\t$similarity\n";
}
close(GRAPH);

open( INPUT, "<$imbiss2" ) or die "Could not open '$imbiss2' $!\n";
open( GRAPH, '>', "$graph2" );
$first = 1;
while ( my $line = <INPUT> ) {
	chomp $line;
	if ( $first == 1 ) {
		$first = 0;
		next;
	}
	my @fields = split ";", $line;

	my $seq1       = $fields[2];
	my $seq2       = $fields[3];
	my $similarity = $fields[4];    # get tm score
	print GRAPH "$seq1\t$seq2\t$similarity\n";
}
close(GRAPH);

exit( print("done") )
