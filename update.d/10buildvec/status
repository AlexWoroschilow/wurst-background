#!/usr/bin/perl
# Copyright 2015 Alex Woroschilow (alex.woroschilow@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
use warnings;

use FindBin;
use lib "/work/public/bm/salamiServer";
use lib "$FindBin::Bin/../../lib";

use ZBH::SGE;
use ZBH::Local;
use ZBH::Flensburg;
use Config::Simple;
use Log::Log4perl;


use Salamisrvini;
use lib $LIB_LIB;     #initialize in local Salamisrvini.pm;
use lib $LIB_ARCH;    #initialize in local Salamisrvini.pm;
use vars qw ( $TMPDIR $INPUT_CLST_LIST $OUTPUT_BIN_DIR $OUTPUT_LIB_LIST );
use vars qw ( $OUTPUT_VEC6_DIR $OUTPUT_VEC7_DIR $OUTPUT_VEC_TAU_DIR $OUTPUT_VEC_TAU_ALL );
use vars qw ( $OUTPUT_VEC6_DIR $OUTPUT_VEC7_DIR );


sub fatal($ $) {
  my $logger = shift;
  my $message = shift;
  
  $logger->fatal($message);
  ZBH::Flensburg::fatal("10buildvec", "Can not start task", $message);  
}

sub main {
    my $file_config = shift;
    my $logfile = shift;
    my $server = shift;
    my $planner = shift;
    my $worker = shift;
    
    my $config  = new Config::Simple($file_config);

    Log::Log4perl->init($logfile);
    my $logger  = Log::Log4perl->get_logger("10buildvec");
    
    $logger->info("Server: ", $server );
    $logger->info("Planner: ", $planner );
    $logger->info("Worker: ", $worker );
    
    $config->param( "planner.cluster",            $INPUT_CLST_LIST );
    $config->param( "planner.source",             $PDB_TOP_DIR );
    $config->param( "planner.temp",               $TMPDIR );
    $config->param( "planner.output_bin",         $OUTPUT_BIN_DIR );
    $config->param( "planner.output_vec_6",       $OUTPUT_VEC6_DIR );
    $config->param( "planner.output_vec_6_all",   $OUTPUT_VEC6_ALL );
    $config->param( "planner.output_vec_7",       $OUTPUT_VEC7_DIR );
    $config->param( "planner.output_vec_7_all",   $OUTPUT_VEC7_ALL );
    $config->param( "planner.output_vec_tau",     $OUTPUT_VEC_TAU_DIR );
    $config->param( "planner.output_vec_tau_all", $OUTPUT_VEC_TAU_ALL );
    $config->param( "planner.class_vec_6",  	  $CLASSFILE );
    $config->param( "planner.class_vec_7",  	  $CA_CLASSFILE );
    $config->param( "planner.outlist_lib", 	  $OUTPUT_LIB_LIST );

    $config->write($file_config);    
    
    my $cluster = $config->param("planner.cluster");    
    $logger->info("planner.cluster: ", $cluster);
    if ( not ZBH::Local::is_file_exists($cluster)) {
      fatal($logger, "Can not start task, file not found: $cluster");
      return("error");
    }    
    
    my $class_vec6 = $config->param("planner.class_vec_6");    
    $logger->info("planner.class_vec_6: ", $class_vec6);
    if ( not ZBH::Local::is_file_exists($class_vec6)) {
      fatal($logger, "Can not start task, file not found: $class_vec6");
      return("error");
    }	

    my $class_vec7 = $config->param("planner.class_vec_7");    
    $logger->info("planner.class_vec_7: ", $class_vec7);
    if ( not ZBH::Local::is_file_exists($class_vec7)) {
      fatal($logger, "Can not start task File not found: $class_vec7");
      return("error");
    }

    my $temp = $config->param("planner.temp");
    $logger->info("planner.temp: ", $temp);
    if ( not length($temp)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (temp)");
      return("error");
    }	

    my $source = $config->param("planner.source");
    $logger->info("planner.source: ", $source);
    if ( not length($source)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (source)");
      return("error");
    }	
    
    my $output_bin = $config->param("planner.output_bin");
    $logger->info("planner.output_bin: ", $output_bin);
    if ( not length($output_bin)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_bin)");
      return("error");
    }	
    
    my $output_vec_6  = $config->param("planner.output_vec_6");
    $logger->info("planner.output_vec_6: ", $output_vec_6);
    if ( not length($output_vec_6)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_6)");
      return("error");
    }	

    my $output_vec_6_all = $config->param("planner.output_vec_6_all");
    $logger->info("planner.output_vec_6_all: ", $output_vec_6_all);
    if ( not length($output_vec_6_all)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_6_all)");
      return("error");
    }	    

    my $output_vec_7 = $config->param("planner.output_vec_7");
    $logger->info("planner.output_vec_7: ", $output_vec_7);    
    if ( not length($output_vec_7)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_7)");
      return("error");
    }	    
    
    my $output_vec_7_all = $config->param("planner.output_vec_7_all");
    $logger->info("planner.output_vec_7_all: ", $output_vec_7_all);
    if ( not length($output_vec_7_all)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_7_all)");
      return("error");
    }	    

    my $output_vec_tau = $config->param("planner.output_vec_tau");
    $logger->info("planner.output_vec_tau: ", $output_vec_tau);
    if ( not length($output_vec_tau)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_tau)");
      return("error");
    }	    

    my $output_vec_tau_all = $config->param("planner.output_vec_tau_all");
    $logger->info("planner.output_vec_tau_all: ", $output_vec_tau_all);
    if ( not length($output_vec_tau_all)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (output_vec_tau_all)");
      return("error");
    }	    
    
    my $outlist_lib = $config->param("planner.outlist_lib");
    $logger->info("planner.outlist_lib: ", $outlist_lib);
    if ( not length($outlist_lib)) {
      fatal($logger, "Can not start task, folder name lenght can not be empty (outlist_lib)");
      return("error");
    }	    
    
    if ( ZBH::Local::is_background_process($server)
	|| ZBH::SGE::is_background_process_sge($server)) {
	  $logger->error("Already started: ", $server);
	  return("wait");
    }
    
    my $lastrun = $config->param("settings.lastrun");
    $logger->info("settings.lastrun: ", $lastrun);
    
    my $interval = $config->param("settings.interval");
    $logger->info("settings.interval: ", $lastrun);

    my $todayrun = time;    
    if ( ( $todayrun - $lastrun ) < $interval ) {
      $logger->info("Done");
      return("done");
    }

    $logger->info("Ready to start");
    return ("ready");
}

exit( 
  not print( 
      main( 
	"$FindBin::Bin/../../etc/10buildvec.conf", 
	"$FindBin::Bin/../../etc/logging.conf",
	"$FindBin::Bin/bin/server.sh", 
	"$FindBin::Bin/bin/planner.sh", 
	"$FindBin::Bin/bin/worker.sh", 
    ) 
  ) 
);

